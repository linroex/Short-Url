# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

.build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - /usr/local/bin/python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - echo "Compile complete."

.unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 1
    - echo "Code coverage is 90%"

.lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 1
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - set -e
    - mkdir -p ~/.ssh
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> ~/.ssh/config
    - "command -v ssh-agent > /dev/null || (apt update -y && apt install openssh-client -y)"
    - eval $(ssh-agent -s)
    - ssh-agent bash | echo -n "$PROD_SSH_KEY" | ssh-add -

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - PROD_SERVER=$PROD_SERVER_IP
    - ssh root@${PROD_SERVER} 'rm -rf /home/linroex/prod_dict/'
    - ssh root@${PROD_SERVER} 'cd /home/linroex/ && git clone http://git:nyxrbMKXChH1WCPRmG83@gl-cloud.mylabs.space/gitlab-instance-01cda2c6/nycu.one.git prod_dict'
    - ssh root@${PROD_SERVER} 'if pgrep gunicorn; then pkill gunicorn; fi'
    - ssh root@${PROD_SERVER} 'cat /home/linroex/nycu.one/Config.py > /home/linroex/prod_dict/Config.py'
    - ssh root@${PROD_SERVER} 'cd /home/linroex/prod_dict/ && python3 -m venv .venv && source .venv/bin/activate && pip3 install -r requirements.txt'
    - ssh root@${PROD_SERVER} 'sudo /home/linroex/prod_dict/.env/bin/gunicorn -b 0.0.0.0:80 main:app'
    - echo "Application successfully deployed."
